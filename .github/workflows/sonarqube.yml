name: SonarQube Analysis

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:  # Allow manual triggering

env:
  SONAR_PROJECT_KEY: openautomate-backend
  SONAR_PROJECT_NAME: openautomate-backend
  SONAR_HOST_URL: http://sonar.openautomate.me
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonar:
    name: SonarQube Analysis with Code Coverage
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history for better SonarQube analysis
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for accurate blame information

      # Step 2: Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Step 3: Setup Java (required for SonarScanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 4: Install SonarQube Scanner
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global coverlet.console
      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Step 5: Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/*.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 6: Begin SonarQube analysis
      - name: Begin SonarQube analysis
        run: |
          dotnet sonarscanner begin \
            /k:"$SONAR_PROJECT_KEY" \
            /n:"$SONAR_PROJECT_NAME" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths="./TestResults/coverage.opencover.xml,**/TestResults/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="./TestResults/*.trx" \
            /d:sonar.coverage.exclusions="**/*Tests*.cs,**/obj/**/*,**/*.designer.cs,**/Migrations/**" \
            /d:sonar.exclusions="**/bin/**/*,**/obj/**/*" \
            /d:sonar.cpd.exclusions="**/Migrations/**/*" \
            /d:sonar.verbose=true

      # Step 7: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore OpenAutomate.Backend.sln

      # Step 8: Build the solution
      - name: Build solution
        run: dotnet build OpenAutomate.Backend.sln --configuration Release --no-restore

      # Step 9: Run tests with coverage (proper project targeting)
      - name: Run tests with coverage
        run: |
          # Create a directory for the results
          mkdir -p ./TestResults
          
          # Run Core tests
          dotnet test OpenAutomate.Core.Tests/OpenAutomate.Core.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger:trx \
            --results-directory:./TestResults \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./TestResults/core.coverage.opencover.xml
          
          # Run API tests
          dotnet test OpenAutomate.API.Tests/OpenAutomate.API.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger:trx \
            --results-directory:./TestResults \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./TestResults/api.coverage.opencover.xml
          
          # Run Infrastructure tests
          dotnet test OpenAutomate.Infrastructure.Tests/OpenAutomate.Infrastructure.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger:trx \
            --results-directory:./TestResults \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=./TestResults/infrastructure.coverage.opencover.xml
          
          # Install reportgenerator for merging reports
          dotnet tool install -g dotnet-reportgenerator-globaltool
          
          # Merge all coverage reports into one
          reportgenerator \
            -reports:./TestResults/*.coverage.opencover.xml \
            -targetdir:./TestResults/CoverageReport \
            -reporttypes:Opencover \
            -assemblyfilters:"+OpenAutomate.API;+OpenAutomate.Core;+OpenAutomate.Infrastructure"
          
          # Copy the merged report to the location SonarQube expects
          cp -f ./TestResults/CoverageReport/Opencover.xml ./TestResults/coverage.opencover.xml || true
            
      # List coverage files for debugging
      - name: List coverage files
        run: |
          echo "=== Checking coverage files ==="
          find . -name "*.opencover.xml" -type f
          echo "=== End of coverage files ==="
          
      # Optional: Install ReportGenerator to create HTML coverage report
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool || true
        
      # Generate HTML coverage report (only if coverage file exists)
      - name: Generate coverage report
        run: |
          if [ -f "./TestResults/coverage.opencover.xml" ]; then
            reportgenerator -reports:./TestResults/coverage.opencover.xml -targetdir:./TestResults/CoverageReport/Html -reporttypes:Html
          else
            echo "Coverage file not found, skipping report generation"
            # Create empty directory to avoid upload failure
            mkdir -p ./TestResults/CoverageReport/Html
          fi

      # Upload HTML report as artifact
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: ./TestResults/CoverageReport/Html
          retention-days: 5

      # Step 10: End SonarQube analysis
      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR decoration